# -*- coding: utf-8 -*-
"""Image_preprocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12u4DWJqYUmJ6fkZfgNyU2ZlsGywHx6W5
"""

import warnings
warnings.filterwarnings('ignore')

import patoolib
import os
import pandas as pd
import cv2 as cv

from tqdm import tqdm
from matplotlib import pyplot as plt

file_path = r'C:\Users\azmin\Downloads\Deepglobe\metadata.csv'
df = pd.read_csv(filepath_or_buffer=file_path)

df.shape
df.head()

df.isnull().sum()

data_path='C:/Users/azmin/Downloads/Deepglobe/'

train_data = df[df['split'] == 'train']
valid_data = df[df['split'] == 'valid']
test_data = df[df['split'] == 'test']

print(train_data.shape)


def display_images(df, split_val, split_col='split', data_path='C:/Users/azmin/Downloads/Deepglobe/' , limit=5, show_plot=True):
    # split_val → 'train' or 'valid' or 'test'

    split_data = df[df[split_col] == split_val][:limit]

    if (split_val == 'train'):
        sat_images = [data_path + i for i in split_data['sat_image_path'].to_list()]
        mask_images = [data_path + i for i in split_data['mask_path'].to_list()]

        sat_titles = [i.split('/')[-1] for i in sat_images]
        mask_titles = [i.split('/')[-1] for i in mask_images]

        for i in list(range(len(sat_images))):
            # satellite image reading in RGB
            simage = cv.imread(sat_images[i])
            simage = cv.cvtColor(simage, cv.COLOR_BGR2RGB)

            # masked image
            mimage = cv.imread(mask_images[i], cv.IMREAD_UNCHANGED)

            if show_plot:
                plt.figure(figsize=(10, 10))

                plt.subplot(1, 2, 1)
                plt.title(sat_titles[i])
                plt.axis("off")
                plt.imshow(simage)

                plt.subplot(1, 2, 2)
                plt.title(mask_titles[i])
                plt.axis("off")
                plt.imshow(mimage)

                plt.show()

        return None

    # else part
    sat_images = [data_path + i for i in split_data['sat_image_path'].to_list()]
    sat_titles = [i.split('/')[-1] for i in sat_images]

    for i in list(range(len(sat_images))):
        # satellite image reading in RGB
        simage = cv.imread(sat_images[i])
        simage = cv.cvtColor(simage, cv.COLOR_BGR2RGB)

        if show_plot:
            plt.figure(figsize=(5, 5))
            plt.title(sat_titles[i])
            plt.axis("off")
            plt.imshow(simage)
            plt.show()

    return None


display_images(df, 'valid','split',data_path,5, False)


def cross_check_masks(df, split_col='split', split_val='train', limit=5, data_path='C:/Users/azmin/Downloads/Deepglobe/',
                      show_plot=False, save_fig=False):
    split_data = df[df[split_col] == split_val]

    mask_images = [data_path + i for i in split_data['mask_path'].to_list()]
    mask_titles = [i.split('/')[-1] for i in mask_images]

    for i in list(range(len(mask_images))):
        # masked image
        mimage = cv.imread(mask_images[i])
        mimage = cv.cvtColor(mimage, cv.COLOR_BGR2RGB)

        # image binarization
        th, mimage_bin = cv.threshold(src=mimage, thresh=128, maxval=255, type=cv.THRESH_BINARY)

        if show_plot:
            plt.figure(figsize=(10, 10))

            plt.subplot(1, 2, 1)
            plt.title(mask_titles[i])
            plt.axis("off")
            plt.imshow(mimage)

            plt.subplot(1, 2, 2)
            plt.title(mask_titles[i] + '_bin')
            plt.axis("off")
            plt.imshow(mimage_bin)

            plt.show()

        if save_fig:
            cv.imwrite(data_path + 'train2/' + mask_titles[i], mimage_bin)

    return None


cross_check_masks(df=df, show_plot=False, save_fig=False)
"""
import shutil
shutil.make_archive('DeepGlobe_Bin', 'zip', 'C:/Users/azmin/Downloads/Deepglobe/')
#! mv /content/DeepGlobe_Bin.zip /content/drive/MyDrive/AAIC/SCS-2/deep_globe_road_extraction/DeepGlobe_Bin.zip
#! gdown --id 1TnmywRERXwgqI45OkR8WoNYxlglzNXSy
patoolib.extract_archive(archive='C:/Users/azmin/Downloads/Deepglobe/DeepGlobe_Bin.zip', outdir='C:/Users/azmin/Downloads/Deepglobe/DeepGlobe_Bin')
"""




#The ideal shape that is taken here is (256, 256)
def resize_images_in_archive(df, split_val, split_col='split', data_path='C:/Users/azmin/Downloads/Deepglobe/', size=256,
                             save_fig=False):
    # split_val → 'train' or 'valid' or 'test'

    split_data = df[df[split_col] == split_val]
    print(data_path)
    if (split_val == 'train'):
        sat_images = [data_path + i for i in split_data['sat_image_path'].to_list()]
        mask_images = [data_path + i for i in split_data['mask_path'].to_list()]

        sat_titles = [i.split('/')[-1] for i in sat_images]
        mask_titles = [i.split('/')[-1] for i in mask_images]

        print('Saving the train images')
        for i in tqdm(list(range(len(sat_images)))):
            # satellite image reading in RGB
            simage = cv.imread(sat_images[i])
            simage = cv.resize(simage, (size, size), interpolation=cv.INTER_NEAREST)

            # masked image
            mimage = cv.imread(mask_images[i])
            mimage = cv.resize(mimage, (size, size), interpolation=cv.INTER_NEAREST)

            if save_fig:
                cv.imwrite(data_path + 'train3/' + sat_titles[i], simage)
                cv.imwrite(data_path + 'train3/' + mask_titles[i], mimage)

        return None

    # else part
    sat_images = [data_path + i for i in split_data['sat_image_path'].to_list()]
    sat_titles = [i.split('/')[-1] for i in sat_images]

    print('Saving the {} images'.format(split_val))
    for i in tqdm(list(range(len(sat_images)))):
        # satellite image reading in RGB
        simage = cv.imread(sat_images[i])
        simage = cv.resize(simage, (size, size), interpolation=cv.INTER_NEAREST)

        if save_fig:
            cv.imwrite(data_path + 'test2' + '/' + sat_titles[i], simage)

    return None

resize_images_in_archive(df, 'train', split_col='split', data_path='C:/Users/azmin/Downloads/Deepglobe/', size=256,
                             save_fig=True)